from flask import Flask, url_for, redirect, request, render_template, make_response
from datetime import date, timedelta
import openpyxl
import json
import warnings
import bcrypt

#____________________________________data mining and cleaning___________________________________________________
warnings.filterwarnings("ignore", message="DrawingML support is incomplete and limited to charts and images only. Shapes and drawings will be lost.")

# Load the Excel file
workbook = openpyxl.load_workbook(r'C:\Users\OtienBer\anaconda3\Lib\venv\NI1 RECON WORKSHEET RUNNING.xlsm')

# Select the worksheet- change daily to reflect recon date
worksheet = workbook['05.09.2023']

# Read the value in main recon sheet
beer_value = worksheet['FU39'].value
keg_value = worksheet['FU38'].value
totals = beer_value + keg_value

# images at https://www.freepik.com/photos/beer

var = {f"Operations Date\n({date.today() - timedelta(days=1)})": 'Quantity(cases)',
       'Beer:': round(float(beer_value), 2),
       'Keg:': round(float(keg_value), 2),
       'Total': round(float(totals), 2)
       }
workbook.close()

# Store user IDs and hashed passwords in a dictionary
user_credentials = {
    'james.reynard@abl.com': bcrypt.hashpw('Rey44@254'.encode('utf-8'), bcrypt.gensalt()),
    'kennedy.waweru@abl.com': bcrypt.hashpw('Wawesh75..'.encode('utf-8'), bcrypt.gensalt()),
    '13454': bcrypt.hashpw('reasonalbe254'.encode('utf-8'), bcrypt.gensalt()),
    'hellen.wambui@abl.com': bcrypt.hashpw('Chocolate.654'.encode('utf-8'), bcrypt.gensalt())
}
# Convert the hashed passwords from bytes to strings
user_credentials_str = {
    user: hashed.decode('utf-8') for user, hashed in user_credentials.items()
}

# Specify the file path where you want to save the JSON data
json_file_path = 'user_credentials.json'

# Open the file in write mode and write the dictionary as JSON
with open(json_file_path, 'w') as json_file:
    json.dump(user_credentials_str, json_file)

# Load the user_credentials from the JSON file
with open(json_file_path, 'r') as json_file:
    user_credentials = json.load(json_file)


#_____________________________________________________app routing_____________________________________________________
app = Flask(__name__)

@app.route(rule="/flask_tutorial1/<user_input>")
def inventory_redirect(user_input):
    if user_input == 'admin':
        return redirect(url_for('administrator'))
    elif user_input == 'main':
        return redirect(url_for('main'))
    elif user_input == 'agl-ncd':
        return redirect(url_for('users_loging_page'))
    elif user_input == 'trial':
        return redirect(url_for('trial'))
    elif user_input == 'cookies':  # entering cookies which will be posted by set_cookies()
        return redirect(url_for('cookies_page'))
    elif user_input == 'getcookies':  # displaying the cookies
        return redirect(url_for('get_cookies'))
    else:
        return '''
<h2><b>NEW VISITOR?</b></h2>

<h3>Welcome to the page</h3>
<p>---If you are the <i>administrator</i>, use the URL: <br><strong><u>/flask_tutorial1/admin</strong></u><br>
Where you will be prompted to enter your administrator password.<br><br>
---If you are a <i>guest</i>, use the guest URL: <br><strong><u>/flask_tutorial1/main</strong></u>
<p/> 
'''

# _________________________________________________________decorated urls______________________________________________
@app.route(rule='/flask_tutorial1/admin/', methods=['GET', 'POST'])  # HTTP methods use upper case
def administrator():
    if request.method == 'POST':  # indicates that the function is expecting data to be sent through an HTML form
        admin_password = request.form.get('password')  #  retrieves the value of the 'password' field from the submitted form
        if admin_password == 'Benayahu':
            return render_template('admin-controls-page.html')
        else:
            return f'''
Wrong password!!!<br><br>
<b>Kindly use the correct admin password</b>
'''
    else:
        return render_template("admin-loging-page.html")


@app.route(rule='/flask_tutorial1/main/', methods=['GET', 'POST'])
def main():
    global var
    if request.method == 'POST':
        user_data = {
            'user_id': request.form.get('user_id'),
            'password': request.form.get('password')
        }
        # Check if user ID exists in the user_credentials dictionary
        if user_data['user_id'] in user_credentials:
            # Verify the password using bcrypt
            if bcrypt.checkpw(user_data['password'].encode('utf-8'),
                              user_credentials[user_data['user_id']].encode('utf-8')):
                return render_template("ncd-main.html", result=var)  # change

        # If either user ID or password is incorrect, deny access
        return '''
                Wrong user ID or password!!!<br><br>
                <b>Kindly use the correct credentials</b>
                '''
    else:
        return render_template('users-loging-page.html', result=var)


@app.route(rule='/flask_tutorial1/agl-ncd/', methods=['GET', 'POST'])
def users_login_page():
    global var
    if request.method == 'POST':
        user_id = request.form.get('user_id')
        user_password = request.form.get('password')
        # Check if user ID exists in the user_credentials dictionary
        if user_id in user_credentials:
            # Verify the password using bcrypt
            if bcrypt.checkpw(user_password.encode('utf-8'), user_credentials[user_id]):
                return render_template("ncd-main.html", result=var)

        # If either user ID or password is incorrect, deny access
        return '''
                Wrong user ID or password!!!<br><br>
                <b>Kindly use the correct credentials</b>
                '''
    else:
        return render_template('users-loging-page.html')


@app.route(rule='/flask_tutorial1/cookies/')
def cookies_page():
    return render_template('example-on-cookies.html')


@app.route(rule='/flask_tutorial1/setcookies/', methods=['GET', 'POST'])
def set_cookies():
    if request.method == 'POST':
        user = request.form['nm']
        resp = make_response(render_template('readcookie.html'))  # readcookie.html redirects to getcookies url
        resp.set_cookie('userID', user)

        return resp

@app.route(rule='/flask_tutorial1/getcookies/', methods=['GET'])
def get_cookies():
   name = request.cookies.get('userID')
   return render_template('cookies.html', name=name)










































if __name__ == "__main__":
    app.run(debug=True)
